
const saveButton = document.getElementById('save-button');
const heartIcon = saveButton.querySelector('i.fa-heart');
const background = document.getElementById("background-modal");
const bookmark = document.getElementById("bookmark-saved");
const savedPhrases = document.getElementById("saved-phrases");

const scheme = localStorage.getItem('scheme');

if (!['dark', 'white'].includes(scheme)) {
  localStorage.setItem('scheme', 'white');
}

if (scheme === 'dark') {
  heartIcon.style.color = "#ffffff"
  document.querySelector('meta[name="theme-color"]').setAttribute('content', '#0f0f0f');
} else {
  document.getElementById("bookmark-saved").style.color = "rgb(213 213 213)"
  document.querySelector('meta[name="theme-color"]').setAttribute('content', '#ffffff');
}

const frases = [
  "Acompa√±a estas buenas frases con un buen caf√© ‚òï",
  "Al buen tiempo, le vienen unas buenas frases tambi√©n...",
  "Una frase cada d√≠a, gratis y simple.",
  "Unos buenos mates tambi√©n acompa√±an a las frases üßâ",
  "Un caf√© caliente y una frase inspiradora, ¬øqu√© m√°s necesitas?",
  "No hay nada como una buena frase para empezar el d√≠a con el pie derecho",
  "Comienza tu d√≠a con una sonrisa y una frase motivadora",
  "Las palabras tienen poder, elige las que te inspiren",
  "Una frase positiva puede cambiar tu perspectiva del d√≠a",
  "Las buenas frases son como la m√∫sica para el alma",
];

document.getElementById("randomDesc").textContent = frases[Math.floor(Math.random()*frases.length)];

if (localStorage.getItem('scheme') === "dark") {
  document.body.style.backgroundColor = "#0F0F0F"
  document.body.style.color = "#ffffff"
  document.getElementsByTagName("i")[0].style.color = "#ffffff"
  document.getElementsByTagName("i")[1].style.color = "#ffffff"
  document.getElementsByTagName("i")[2].style.color = "#ffffff"
}

document.getElementById("dark-mode-turn").addEventListener("click", () => {
  if (localStorage.getItem('scheme') == "white") {
    document.body.style.backgroundColor = "#0F0F0F"
    document.body.style.color = "#ffffff"
    document.getElementsByTagName("i")[0].style.color = "#ffffff"
    document.getElementsByTagName("i")[1].style.color = "#ffffff"
    document.getElementsByTagName("i")[2].style.color = "#ffffff"
    localStorage.setItem('scheme', 'dark');
    document.getElementsByTagName("i")[0].classList = "fa-solid fa-sun fa-xl"
    heartIcon.style.color = "#ffffff"
    document.getElementById("bookmark-saved").style.color = "#ffffff"
    document.querySelector('meta[name="theme-color"]').setAttribute('content', '#0F0F0F');
    document.getElementById("supportPage").style.color = "#cfcfcf"
    document.getElementById("supportPage").style.backgroundColor = "#424242"
  } else {
    document.body.style.backgroundColor = "#ffffff"
    document.body.style.color = "#000000"
    document.getElementsByTagName("i")[0].style.color = "#000000"
    document.getElementsByTagName("i")[1].style.color = "#000000"
    document.getElementsByTagName("i")[2].style.color = "#000000"
    localStorage.setItem('scheme', 'white');
    document.getElementsByTagName("i")[0].classList = "fa-solid fa-moon fa-xl"
    heartIcon.style.color = "black"
    document.querySelector('meta[name="theme-color"]').setAttribute('content', '#ffffff');
    document.getElementById("supportPage").style.color = "#0f0f0f"
    document.getElementById("supportPage").style.backgroundColor = "#f3f3f3"
  }
})

// Apoyo de la pagina

document.getElementById("soporta").addEventListener("click", () => {

})

// Obtenemos el bot√≥n HTML
let likedQuotes = JSON.parse(localStorage.getItem('likedQuotes')) || [];

// Agregamos un controlador de eventos de clic al bot√≥n
saveButton.addEventListener('click', function () {
  // Obtenemos el icono del coraz√≥n dentro del bot√≥n
  const phrase = {
    phrase: document.getElementById("phrase").textContent,
    author: document.getElementById("author").textContent,
    liked: false,
    date: Date.now()
  }
  if (!(phrase.phrase == '' && phrase.author == '')) {
    // Buscar la cita correspondiente en el array de citas favoritas
    const index = likedQuotes.findIndex(q => q.phrase === phrase.phrase && q.author === phrase.author);

    // Si la cita ya existe en el array de citas favoritas y est√° marcada como "liked", cambiarla a "unliked"
    if (index !== -1 && likedQuotes[index].liked) {
      likedQuotes[index].liked = false;
      saveButton.classList.remove('liked');
      heartIcon.classList.replace('fa-solid', 'fa-regular');
      // Eliminar la cita del array de citas favoritas
      likedQuotes.splice(index, 1);
    } else { // Si la cita no existe en el array de citas favoritas o est√° marcada como "unliked", marcarla como "liked"
      if (index === -1) {
        likedQuotes.push(phrase);
      } else {
        likedQuotes[index].liked = true;
      }
      saveButton.classList.add('liked');
      heartIcon.classList.replace('fa-regular', 'fa-solid');
      if (localStorage.getItem('scheme') == "dark") {
        heartIcon.style.color = "white";
      }
    }
    // Guardar el array de citas favoritas en el localStorage
    localStorage.setItem('likedQuotes', JSON.stringify(likedQuotes));
  }
});

// Verificar si la cita ya est√° en el array de citas favoritas y actualizar el bot√≥n y el √≠cono en consecuencia.
const currentPhrase = {
  phrase: document.getElementById("phrase").textContent,
  author: document.getElementById("author").textContent,
}

const currentFavorited = likedQuotes.find(q => q.phrase === currentPhrase.phrase && q.author === currentPhrase.author);
if (currentFavorited) {
  saveButton.classList.add('liked');
  saveButton.querySelector('i.fa-heart').classList.replace('fa-regular', 'fa-solid');
  if (localStorage.getItem('scheme') == 'dark') {
    saveButton.querySelector('i.fa-heart').style.color = "white";
  } else {
    saveButton.querySelector('i.fa-heart').style.color = "black";
  }
}

function getDateDiff(date) {
  const now = new Date();
  const diffInMs = now - date;

  if (diffInMs < 60000) { // Menos de 1 minuto
    return "UNOS SEGUNDOS";
  } else if (diffInMs < 3600000) { // Menos de 1 hora
    const diffInMins = Math.floor(diffInMs / 60000);
    return `${diffInMins} ${diffInMins > 1 ? "MINUTOS" : "MINUTO"}`;
  } else if (diffInMs < 86400000) { // Menos de 1 d√≠a
    const diffInHours = Math.floor(diffInMs / 3600000);
    return `${diffInHours} ${diffInHours > 1 ? "HORAS" : "HORA"}`;
  } else { // 1 d√≠a o m√°s
    const diffInDays = Math.floor(diffInMs / 86400000);
    return `${diffInDays} ${diffInDays > 1 ? "D√çAS" : "D√çA"}`;
  }
}

function renderBookmark(data) {
  bookmark.innerHTML = "";
  if (!data || data.length === 0) {
    bookmark.innerHTML = "<p>No hay frases guardadas, por ahora...</p>";
    return;
  }
  let pages = "";
  for (let i = 0; i < data.length; i += 4) {
    const page = data
      .sort((a, b) => new Date(b.date) - new Date(a.date))
      .slice(i, i + 4)
      .map((item, index) => {
        return `
          <div class="phrase" id="phrase-fav">
            <div id="phraseDetailsBook">
              <i class="fa-solid fa-clock"></i>
              <label class="date-add-phrase" id="date-phrase-added">AGREGADA HACE ${getDateDiff(item.date)}</label>
            </div>
            <p class="phrase-text" id="phrase-text-fav">${item.phrase}</p>
            <div class="config-phrase">
              <p class="phrase-author" id="phrase-author-fav">${item.author}</p>
              <button class="delete-button" id="delete-phrase" data-index="${
                i + index
              }"><i class="fa-solid fa-trash"></i></button>
            </div> 
          </div>
        `;
      })
      .join("");
    pages += `<div class="page">${page}</div>`;
  }
  bookmark.innerHTML = pages;
  const deleteButtons = document.querySelectorAll(".delete-button");
  deleteButtons.forEach((button) => {
    button.addEventListener("click", (event) => {
      const index = parseInt(event.target.getAttribute("data-index"));
      data.splice(index, 1);
      localStorage.setItem("likedQuotes", JSON.stringify(data));
      renderBookmark(data);
    });
  });
}

savedPhrases.addEventListener("click", () => {
  const data = JSON.parse(localStorage.getItem("likedQuotes"));
  bookmark.style.display = "initial";
  background.style.display = "initial";
  renderBookmark(data);
});

background.addEventListener("click", () => {
  bookmark.style.display = "none";
  background.style.display = "none";
  bookmark.innerHTML = "";
});